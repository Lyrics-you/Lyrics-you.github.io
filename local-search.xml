<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++空类与6个成员函数</title>
    <link href="/2020/09/17/20200917/"/>
    <url>/2020/09/17/20200917/</url>
    
    <content type="html"><![CDATA[<div class="markdown-body"><p class="note note-primary">C++空类与6个成员函数</p><h1 id="C-空类与6个成员函数"><a href="#C-空类与6个成员函数" class="headerlink" title="C++空类与6个成员函数"></a>C++空类与6个成员函数</h1><p><img src="https://i.loli.net/2020/09/17/pcfsa6kERVWPxwq.png" srcset="/img/loading.gif" alt="shadow"></p><h2 id="空类，声明时编译器不会生成任何成员函数"><a href="#空类，声明时编译器不会生成任何成员函数" class="headerlink" title="空类，声明时编译器不会生成任何成员函数"></a>空类，声明时编译器不会生成任何成员函数</h2><p>对于空类，编译器不会生成任何成员函数，只会生成1个字节的占位符。（C++不允许一个类的大小为0）</p><p>有时可能会以为编译器会为空类生成默认构造函数等，事实上是不会的，编译器只会在需要的时候生成6个成员函数：一个缺省的构造函数、一个拷贝构造函数、一个析构函数、一个赋值运算符、一对取址运算符和一个this指针。</p><p>代码：</p><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Empty_one</span></span><span class="hljs-class">&#123;</span>&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Empty_two</span></span><span class="hljs-class">&#123;</span>&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Empty_three</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Empty_four</span> :</span> <span class="hljs-keyword">public</span> Empty_two, <span class="hljs-keyword">public</span> Empty_three&#123;&#125;;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"sizeof(Empty_one):"</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(Empty_one) &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"sizeof(Empty_two):"</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(Empty_two) &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"sizeof(Empty_three):"</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(Empty_three) &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"sizeof(Empty_four):"</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(Empty_four) &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>运行结果：</p><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">sizeof</span><span class="hljs-params">(Empty_one)</span></span>:<span class="hljs-number">1</span><span class="hljs-function"><span class="hljs-title">sizeof</span><span class="hljs-params">(Empty_two)</span></span>:<span class="hljs-number">1</span><span class="hljs-function"><span class="hljs-title">sizeof</span><span class="hljs-params">(Empty_three)</span></span>:<span class="hljs-number">8</span><span class="hljs-function"><span class="hljs-title">sizeof</span><span class="hljs-params">(Empty_four)</span></span>:<span class="hljs-number">8</span></code></pre><p>分析：</p><p>类Empty_one、Empty_two是空类，但空类同样可以被实例化，而每个实例在内存中都有一个独一无二的地址，为了达到这个目的，编译器往往会给一个空类隐含的加一个字节，这样空类在实例化后在内存得到了独一无二的地址，所以sizeof(Empty_one)和sizeof(Empty_two)的大小为1。</p><p>类Empty_three里面因有一个纯虚函数，故有一个指向虚函数的指针（vptr），64位系统分配给指针的大小为8个字节，所以sizeof(Empty_three)的大小为8。</p><p>类Empty_four继承于Empty_two和Empty_three，编译器取消Empty_two的占位符，保留一个虚函数表，故大小为8。</p><h2 id="空类，定义时会生成6个成员函数"><a href="#空类，定义时会生成6个成员函数" class="headerlink" title="空类，定义时会生成6个成员函数"></a>空类，定义时会生成6个成员函数</h2><p> 当空类Empty_one定义一个对象时Empty_one pt;sizeof(pt)仍是为1，但编译器会生成6个成员函数：一个缺省的构造函数、一个拷贝构造函数、一个析构函数、一个赋值运算符、两个取址运算符。</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Empty</span></span><span class="hljs-class">&#123;</span>&#125;;</code></pre><p>等价于：</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Empty</span></span><span class="hljs-class">&#123;</span>  <span class="hljs-keyword">public</span>:    Empty();                            <span class="hljs-comment">//缺省构造函数</span>    Empty(<span class="hljs-keyword">const</span> Empty &amp;rhs);            <span class="hljs-comment">//拷贝构造函数</span>    ~Empty();                           <span class="hljs-comment">//析构函数 </span>    Empty&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> Empty &amp;rhs); <span class="hljs-comment">//赋值运算符</span>    Empty* <span class="hljs-keyword">operator</span>&amp;();                 <span class="hljs-comment">//取址运算符</span>    <span class="hljs-keyword">const</span> Empty* <span class="hljs-keyword">operator</span>&amp;() <span class="hljs-keyword">const</span>;     <span class="hljs-comment">//取址运算符(const版本)</span>&#125;;</code></pre><p>使用时的调用情况：</p><pre><code class="hljs C++">Empty *e = <span class="hljs-keyword">new</span> Empty();    <span class="hljs-comment">//缺省构造函数</span><span class="hljs-keyword">delete</span> e;                  <span class="hljs-comment">//析构函数</span>Empty e1;                  <span class="hljs-comment">//缺省构造函数                               </span><span class="hljs-function">Empty <span class="hljs-title">e2</span><span class="hljs-params">(e1)</span></span>;              <span class="hljs-comment">//拷贝构造函数</span>e2 = e1;                   <span class="hljs-comment">//赋值运算符</span>Empty *pe1 = &amp;e1;          <span class="hljs-comment">//取址运算符(非const)</span><span class="hljs-keyword">const</span> Empty *pe2 = &amp;e2;    <span class="hljs-comment">//取址运算符(const)</span></code></pre><p>C++编译器对这些函数的实现：</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">Empty::Empty</span><span class="hljs-params">()</span>                          <span class="hljs-comment">//缺省构造函数</span></span><span class="hljs-function"></span>&#123;&#125;<span class="hljs-keyword">inline</span> Empty::~Empty()                         <span class="hljs-comment">//析构函数</span>&#123;&#125;<span class="hljs-keyword">inline</span> Empty *Empty::<span class="hljs-keyword">operator</span>&amp;()               <span class="hljs-comment">//取址运算符(非const)</span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; &#125;           <span class="hljs-keyword">inline</span> <span class="hljs-keyword">const</span> Empty *Empty::<span class="hljs-keyword">operator</span>&amp;() <span class="hljs-keyword">const</span>    <span class="hljs-comment">//取址运算符(const)</span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">Empty::Empty</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Empty &amp;rhs)</span>           <span class="hljs-comment">//拷贝构造函数</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-comment">//对类的非静态数据成员进行以"成员为单位"逐一拷贝构造</span>  <span class="hljs-comment">//固定类型的对象拷贝构造是从源对象到目标对象的"逐位"拷贝</span>&#125; <span class="hljs-keyword">inline</span> Empty&amp; Empty::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> Empty &amp;rhs) <span class="hljs-comment">//赋值运算符</span>&#123;  <span class="hljs-comment">//对类的非静态数据成员进行以"成员为单位"逐一赋值</span>  <span class="hljs-comment">//固定类型的对象赋值是从源对象到目标对象的"逐位"赋值。</span>&#125;</code></pre><p> 例如：m是类C中的一个类型为T的非静态成员变量，若C没有声明拷贝构造函数（赋值运算符），m将会通过T的拷贝构造函数（赋值运算符）被拷贝构造(赋值)；该规则递归应用到m的数据成员，直到找到一个拷贝构造函数（赋值运算符）或固定类型（例如：int、double、指针等)为止。</p><p><a href="https://blog.csdn.net/taiyang1987912/article/details/43485569" target="_blank" rel="noopener">https://blog.csdn.net/taiyang1987912/article/details/43485569</a></p><h2 id="关于默认构造函数的扩充"><a href="#关于默认构造函数的扩充" class="headerlink" title="关于默认构造函数的扩充"></a>关于默认构造函数的扩充</h2><p>默认拷贝构造函数（Default Copy Constructor）、默认赋值运算符（operator =）和默认析构函数，是C++类中的六大特殊成员函数中的三个。三者同时遵循一个原则：“一荣俱荣、一损俱损”。如果三者其中的任意一个被显示定义了（defined）那么三者必须都被显式定义。当果三者之一被程序员调用但未没有被显式声明时，编译器会隐含的实现这三个特殊成员函数。当用一个类对象去初始化另一个类对象时，需要用到拷贝构造函数；当用一个类对象去设定另一个类对象时，需要用到赋值运算符。</p><p>什么情况下需要实现默认的构造函数呢？</p><p>1) 类中含有成员类对象，并且此类对象含有默认构造函数；</p><p>这种情况下，如果没有显示的定义构造函数，那么需要一次构造类中定义的所有成员，当构造成员类对象（member class object）的时候，需要调用此成员类的默认构造函数，所以这时候需要编译器构造出默认的构造函数，来调用成员类的默认构造函数。</p><p>2) 类的基类中至少有一个含有默认的构造函数；</p><p>如果没有显式的定义构造函数，同样编译器构造派生类的时候，必然需要调用基类的构造函数，所以需要编译器在派生类中构造出默认的构造函数。</p><p>3) 类中含有虚函数（virtual function）；</p><p>4) 类中含有虚基类（virtual base class）；</p><p>由于虚拟机制的原因，这两种情况下，需要编译器来完成虚函数表（vbtl）的初始化和虚表指针（vptr）的初始化，所以如果没有显式的定义构造函数，需要编译器构造默认的构造函数。（本身虚拟机制就是从编译器角度来实现的）。其他比较简单的情况（类的成员数据都是POD=Plain Old Data），在MSVC中经过O2选项优化编译后，简单的类直接被转换为几个连续定义的变量，自然就不需要默认的构造函数了。</p><p>从编译器编译连接角度，以上四种情况下如果未定义拷贝构造函数，编译器为了编译工作的顺利进行，会自定义拷贝构造函数；（但是：此时的默认拷贝构造函数依然只能完成对象的栈对象的创建和拷贝，无法完成堆上动态内存的拷贝构造，故此时依然属于浅拷贝！编译器为了防止含成员类的类或派生类混乱而使用扩张法调用了经过扩张的默认构造函数，主要完成了类结构意义上的创建和初始化，但不改变其依然对动态内存缺失拷贝手段的浅拷贝本质。）所以此时往往需要程序员显式定义出自己的拷贝构造函数（只有这个时候才是深拷贝）。</p><p><a href="https://blog.csdn.net/KingCat666/article/details/45042359" target="_blank" rel="noopener">https://blog.csdn.net/KingCat666/article/details/45042359</a></p><h2 id="Default-Construtor-的建构操作"><a href="#Default-Construtor-的建构操作" class="headerlink" title="Default Construtor 的建构操作"></a>Default Construtor 的建构操作</h2><p>default constructors 在需要的时候会被编译器产生出来，被谁需要？有如下程序：</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> &#123;</span> <span class="hljs-keyword">public</span>:  <span class="hljs-keyword">int</span>  val;  Foo *pnext;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo_bar</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// Oops: program needs bar's members zeroed out</span>  Foo bar;  <span class="hljs-keyword">if</span> (bar.val || bar.pnext)  <span class="hljs-comment">// ... do something</span>  <span class="hljs-comment">// ...</span>&#125;</code></pre><p>正确的程序语意是要求 default constructor，可以将两个 members 初始化为 0，但编译器并不会为之合成出一个 default constructor，因为上述所说的需要，是指编译器需要的时候，而不是程序员需要的时候，这里编译器并不需要这个 default constructor。所以正确的表述应该是：如果没有任何 user-declared constructor，那么就会有一个 default constructor 被声明，但其是一个 trivial constructor（没啥用的 constructor）。那么，编译器什么时候会生成一个 nontrivial default constructor 呢？</p><h3 id="“带有-Default-Constructor”的-Member-Class-Object"><a href="#“带有-Default-Constructor”的-Member-Class-Object" class="headerlink" title="“带有 Default Constructor”的 Member Class Object"></a>“带有 Default Constructor”的 Member Class Object</h3><p>简单来说：如果一个 class 没有任何 constructor，但其内含一个 member object，而这个 member object 有 default constructor，那么编译器就会合成出一个“nontrivial default constructor”。举个例子：</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> &#123;</span> <span class="hljs-keyword">public</span>:  Foo(), Foo(<span class="hljs-keyword">int</span>)...&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> &#123;</span> <span class="hljs-keyword">public</span>:  Foo   foo;  <span class="hljs-keyword">char</span> *str;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo_bar</span><span class="hljs-params">()</span> </span>&#123;  Bar bar;  <span class="hljs-comment">// Bar::foo must be initialized here</span>  <span class="hljs-keyword">if</span> (str) &#123;  &#125;  ...&#125;</code></pre><p>这个程序当中，编译器会为 class Bar 合成一个 default constructor，因为在 foo_bar 中，声明了一个 Bar 对象，这时候就需要初始化其中的 member，其中 <code>Bar::foo</code> 就需要调用 Foo 的 default constructor 才能初始化，这里初始化 foo 就是编译器的责任，但是 <code>Bar::str</code> 的初始化，则还是程序员的责任。合成出的 default constructor 可能如下：</p><pre><code class="hljs C++"><span class="hljs-comment">// possible synthesis of Bar default constructor</span><span class="hljs-comment">// invoke Foo default constructor for member foo</span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">Bar::Bar</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// Pseudo C++ Code</span>  foo.Foo::Foo();&#125;</code></pre><p>假如程序员定义了一个 default constructor，提供了 str 的初始化操作，但没有提供 foo 的初始化操作：</p><pre><code class="hljs C++">Bar::Bar() &#123;str = <span class="hljs-number">0</span>;&#125;</code></pre><p>现在程序的需求满足，但编译器的需求没有满足，还需要初始化 foo，但 default constructor 已经被程序员定义了，没法再合成一个了，那么编译器会按如下准则行动：“如果 class A 内含一个或一个以上的 member class objects，那么，class A 的每个 constructor 必须调用每一个 member class 的default constructor”。所以，编译器可能会将代码扩展成：</p><pre><code class="hljs C++"><span class="hljs-comment">// Augmented default constructor</span><span class="hljs-comment">// Pseudo C++ Code</span>Bar::Bar() &#123;  foo.Foo::Foo();  <span class="hljs-comment">// augmented compiler code</span>  str = <span class="hljs-number">0</span>;         <span class="hljs-comment">// explicit user code</span>&#125;</code></pre><p>如果有多个 class member object 都需要进行初始化操作，那么编译器会按 member object 再 class 中的声明次序，一个个调用其 default constructors。这些代码都将被安插在 explicit user code（生成的代码是 implicit 的）之前。</p><h3 id="“带有-Default-Constructor”的-Base-Class"><a href="#“带有-Default-Constructor”的-Base-Class" class="headerlink" title="“带有 Default Constructor”的 Base Class"></a>“带有 Default Constructor”的 Base Class</h3><p>如果一个没有任何 constructor 的 class 派生自一个“带有 default constructor”（包括自动生成的）的 base class，那么编译器就会为其生成一个 nontrivial default constructor，在其中调用 base class 的 default constructor。</p><p>如果程序员写了好几个 constructor，但就是没写 default constructor 呢？那么编译器就会扩张现有的每一个 constructor，将所需要调用的 base calss 的 default constructor 一个个加上去，但并不会为其合成新的 default constructor（因为程序员已经提供了 constructor，所以不会再合成了）。注意，如果还有上一小节说的 member class object，那么这些 object 的 default constructor 也会被安插进去，位置在 base class constructor 之后。</p><h3 id="“带有一个-Virtual-Function”的-Class"><a href="#“带有一个-Virtual-Function”的-Class" class="headerlink" title="“带有一个 Virtual Function”的 Class"></a>“带有一个 Virtual Function”的 Class</h3><p>在下面两种情况下，也需合成 default constructor：</p><ol><li>class 声明（或继承）一个 virtual function。</li><li>class 派生自一个继承串链，其中有一个或多个 virtual base class。</li></ol><p>有如下程序：</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Widget</span> &#123;</span> <span class="hljs-keyword">public</span>:  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flip</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;  <span class="hljs-comment">// ...</span>&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flip</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Widget&amp; widget)</span> </span>&#123;  widget.flip();&#125;<span class="hljs-comment">// presuming Bell and Whistle are derived from Widget</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;  Bell    b;  Whistle w;  flip(b);  flip(w);&#125;</code></pre><p>其中，Bell 和 Wistle 都继承自 Widget。那么下面两个扩张操作会在编译期间发生：</p><ol><li>编译器会产生一个 virtual function table（vtbl），其中存放 class 的 virtual function 的地址。</li><li>在每个 class object 中，会合成一个额外的 pointer member（vptr），存放 vtbl 的地址。</li></ol><p>并且，widget.flip() 的调用会被重新改写：</p><pre><code class="hljs C++"><span class="hljs-comment">// simplified transformation of virtual invocation: widget.flip()</span>(*widget.vptr[<span class="hljs-number">1</span>])(&amp;widget)</code></pre><p>其中：</p><ul><li>1 表示 flip() 在 virtual table 中的索引；</li><li>&amp;widget 是 this 指针（每个成员函数都有一个隐含的 this 指针哦）。</li></ul><p>编译器会为每个 Widget object 的 vptr 设定初值，所以对于 class 所定义的每个 constructor，编译器都会安插一些代码来做这样的事。对于没有任何 constructor 的 class，编译器则合成一个 default constructor 来做此事。</p><h3 id="“带有一个-Virtual-Base-Class”的-Class"><a href="#“带有一个-Virtual-Base-Class”的-Class" class="headerlink" title="“带有一个 Virtual Base Class”的 Class"></a>“带有一个 Virtual Base Class”的 Class</h3><p>因为 virtual base class 在内存中的位置也是由一个指针指示出的，所以编译器也会对每个 constructor 安插一些代码，用来支持 virtual base class，如果没有声明任何 constructor，那么编译器就会合成一个 default constructor。</p><p><a href="https://guodong.plus/2020/0317-224323/" target="_blank" rel="noopener">https://guodong.plus/2020/0317-224323/</a></p></div>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爱你就像爱生命</title>
    <link href="/2020/07/29/AsMyLife/"/>
    <url>/2020/07/29/AsMyLife/</url>
    
    <content type="html"><![CDATA[<div class="markdown-body"><p class="note note-primary">爱你就像爱生命 o(*￣▽￣*)ブ</p><p>“咱们应当在一起，否则就太伤天害理啦！”</p><p>“你要是愿意，我就永远爱你；你要是不愿意，我就永远相思。”</p><p>“什么事你先别哭，先来责备我，好吗？”</p><p>“有时候你难过了，这时候我更爱你，只要你不拒绝我就拥抱你。”</p><p>“每三两天就要找你说几句不想对别人说的话。”</p><p>“我和你，就像两个小孩子围着一个神秘的果酱罐，一点一点地尝它，看看里面有多少甜。”</p><p>“也许我是一个坏人，不过，我只要你吻我一下，就会变好呢。”</p><p>“但愿我和你，是一支唱不完地歌。”</p></div>]]></content>
    
    
    
    <tags>
      
      <tag>情书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>醒来甚是觉得爱你</title>
    <link href="/2020/07/29/WakeSeeYou/"/>
    <url>/2020/07/29/WakeSeeYou/</url>
    
    <content type="html"><![CDATA[<div class="markdown-body"><p class="note note-primary">醒来甚是觉得爱你 o(*￣▽￣*)ブ</p><p>“要是世上只有我们两个人多么好，我一 定要把你欺负得哭不出来。”</p><p>“我一天一天明白你的平凡，同时却一天一天愈更深切地爱你。你如照镜子，你不会看得见你特别好的所在，但你如走进我的心里来时，你一定能知道自己是怎样好法。”</p><p>“不要愁老之将至，你老了一定很可爱。而且，假如你老了十岁，我当然也同样老了十岁，世界也老了十岁，上帝也老了十岁，一切都是一样。”</p><p>“我想要在茅亭里看雨、假山边看蚂蚁，看蝴蝶恋爱，看蜘蛛结网，看水，看船，看云，看瀑布，看宋清如甜甜地睡觉。”</p></div>]]></content>
    
    
    
    <tags>
      
      <tag>情书</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
